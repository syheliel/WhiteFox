{
    "summary": "\nThe ConstantAttrMap class is a custom mapping implementation that handles module constants (tensors and ScriptObjects) as keys. The vulnerable __contains__ method checks for key existence by:\n1. Using hash() for ScriptObjects which could lead to hash collisions\n2. Direct comparison for tensors and FakeScriptObjects\n3. Missing proper validation for hash collisions\n4. Being used internally for constant management in PyTorch's export system\n",
    "python_code": "\nimport torch\nimport torch.nn as nn\n\nclass ModelWithConstants(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.register_buffer('buffer1', torch.randn(3))\n        self.register_buffer('buffer2', torch.randn(3))\n\n    def forward(self, x):\n        return x + self.buffer1 + self.buffer2\n\nmodel = ModelWithConstants()\n# This will trigger __contains__ during export\nexported = torch.export.export(model, (torch.randn(3),))\n",
    "api": [
        "nn.Module.register_buffer",
        "torch.export.export",
        "torch.ScriptObject"
    ]
}