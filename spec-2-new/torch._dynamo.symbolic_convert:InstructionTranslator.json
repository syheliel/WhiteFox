{
    "summary": "\nThe `should_compile_partial_graph` function determines whether Dynamo should compile a partial subgraph when encountering unsupported operations. The vulnerable line checks that we're not in \"one graph\" mode before allowing partial compilation. This is important because:\n1. \"One graph\" mode requires compiling the entire function as a single graph\n2. Partial compilation could lead to incorrect behavior in \"one graph\" mode\n3. Missing validation could allow partial compilation when it shouldn't be allowed\n\nThe `create_call_resume_at` function handles creating continuation functions after graph breaks. The vulnerable line installs a global variable without proper validation, which could potentially be exploited if an attacker can control the name or contents.\n```\n\n```python\nclass TestModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        # This will trigger partial graph compilation\n        if x.sum() > 0:  # Data-dependent control flow\n            x = self.linear(x)\n        else:\n            x = -x\n        return x\n\n    def unsafe_global(self):\n        # This could potentially exploit the global installation vulnerability\n        name = \"__resume_at_123\"\n        code = types.CodeType(0, 0, 0, 0, 0, b\"\", (), (), (), \"\", \"\", 0, b\"\")\n        self.output.install_global_unsafe(name, code)\n",
    "python_code": "\nclass TestModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        # This will trigger partial graph compilation\n        if x.sum() > 0:  # Data-dependent control flow\n            x = self.linear(x)\n        else:\n            x = -x\n        return x\n\n    def unsafe_global(self):\n        # This could potentially exploit the global installation vulnerability\n        name = \"__resume_at_123\"\n        code = types.CodeType(0, 0, 0, 0, 0, b\"\", (), (), (), \"\", \"\", 0, b\"\")\n        self.output.install_global_unsafe(name, code)\n"
}