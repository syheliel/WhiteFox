{
    "summary": "\nThe PyExprCSEPass class performs Common Sub-Expression Elimination (CSE) on Python expressions in guard conditions. The vulnerable line involves AST unparsing which:\n1. Converts AST nodes back to source code strings\n2. Can be expensive for large/complex expressions\n3. Is used to identify duplicate sub-expressions\n4. May impact performance when processing many/large guards\n```\n\n```python\nclass ModelWithLargeExpression(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.weights = nn.Parameter(torch.randn(1000, 1000))\n        \n    def forward(self, x):\n        # Large expression that would trigger expensive AST unparsing\n        result = (x @ self.weights.T).sum() * (x @ self.weights.T).sum() * (x @ self.weights.T).sum()\n        return result\n",
    "python_code": "\nclass ModelWithLargeExpression(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.weights = nn.Parameter(torch.randn(1000, 1000))\n        \n    def forward(self, x):\n        # Large expression that would trigger expensive AST unparsing\n        result = (x @ self.weights.T).sum() * (x @ self.weights.T).sum() * (x @ self.weights.T).sum()\n        return result\n"
}