{
    "summary": "\nThe skip_nnmodule_hook_guards configuration controls whether PyTorch Dynamo should guard against changes to hooks on nn.Module instances. When set to True:\n1. Dynamo will not detect if hooks are added/removed/modified after compilation\n2. This can lead to incorrect execution if hooks are changed post-compilation\n3. The optimization assumes hooks remain constant after first compilation\n4. This is unsafe if the model actually uses hooks that may change\n```\n\n```python\nimport torch\nimport torch.nn as nn\n\nclass ModelWithHooks(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.layer = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        return self.layer(x)\n\nmodel = ModelWithHooks()\nhook = lambda module, inp, out: out * 2\n\n# This hook change won't be detected if skip_nnmodule_hook_guards=True\nmodel.layer.register_forward_hook(hook)\n\n# Compile with hook guards disabled\ntorch._dynamo.config.skip_nnmodule_hook_guards = True\ncompiled_model = torch.compile(model)\n\n# The hook will be baked into the compiled graph and changes won't take effect\nout = compiled_model(torch.randn(1, 10))\n```\n\n```yaml\n- nn.Module.register_forward_hook\n- nn.Module.register_backward_hook\n- nn.Module.register_full_backward_hook\n- nn.Module.register_forward_pre_hook\n",
    "python_code": "\nimport torch\nimport torch.nn as nn\n\nclass ModelWithHooks(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.layer = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        return self.layer(x)\n\nmodel = ModelWithHooks()\nhook = lambda module, inp, out: out * 2\n\n# This hook change won't be detected if skip_nnmodule_hook_guards=True\nmodel.layer.register_forward_hook(hook)\n\n# Compile with hook guards disabled\ntorch._dynamo.config.skip_nnmodule_hook_guards = True\ncompiled_model = torch.compile(model)\n\n# The hook will be baked into the compiled graph and changes won't take effect\nout = compiled_model(torch.randn(1, 10))\n```\n\n```yaml\n- nn.Module.register_forward_hook\n- nn.Module.register_backward_hook\n- nn.Module.register_full_backward_hook\n- nn.Module.register_forward_pre_hook\n",
    "api": [
        "nn.Module.register_forward_hook",
        "nn.Module.register_backward_hook",
        "nn.Module.register_full_backward_hook",
        "nn.Module.register_forward_pre_hook"
    ]
}