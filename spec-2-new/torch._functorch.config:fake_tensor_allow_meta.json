{
    "summary": "\nThe fake_tensor_allow_meta flag controls whether meta tensors are allowed when creating fake tensors. This is important because:\n1. Meta tensors are tensors without storage, used for shape/dtype inference\n2. Disallowing meta tensors forces concrete device allocation\n3. Environment variable parsing fails silently if invalid values are provided\n4. Defaults to True (allowing meta tensors) if environment variable is not \"0\"\n```\n\n```python\nclass ModelWithMetaTensors(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        # This will create meta tensors if fake_tensor_allow_meta=True\n        # and environment variable FAKE_ALLOW_META is not \"0\"\n        x = self.linear(x)\n        return x * 2\n",
    "python_code": "\nclass ModelWithMetaTensors(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(10, 10)\n        \n    def forward(self, x):\n        # This will create meta tensors if fake_tensor_allow_meta=True\n        # and environment variable FAKE_ALLOW_META is not \"0\"\n        x = self.linear(x)\n        return x * 2\n"
}