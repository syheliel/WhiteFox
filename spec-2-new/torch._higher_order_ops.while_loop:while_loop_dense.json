{
    "summary": "\nThe while_loop_dense function implements the core while loop operation in PyTorch's higher-order operators. The vulnerable lines perform critical input validation:\n1. The first check ensures carried_inputs is a tuple/list to maintain proper iteration state handling\n2. The second check validates the loop condition (pred) is either:\n   - A scalar boolean tensor (size=[] and dtype=torch.bool)\n   - A Python boolean value\nThese validations are essential for:\n- Maintaining correct loop semantics\n- Preventing type-related runtime errors\n- Ensuring proper tensor metadata handling\n```\n\n```python\nclass WhileLoopModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.counter = 0\n        \n    def forward(self, x):\n        # Condition function - must return boolean scalar\n        def cond_fn(iter, val):\n            return iter < 3\n            \n        # Body function - must return same structure as carried_inputs\n        def body_fn(iter, val):\n            return iter + 1, val * 2\n            \n        # Initial carried inputs (must be tuple/list)\n        carried_inputs = (torch.tensor(0), x)\n        \n        # Execute while loop\n        final_iter, final_val = torch.ops.higher_order.while_loop(\n            cond_fn, body_fn, carried_inputs\n        )\n        return final_val\n",
    "python_code": "\nclass WhileLoopModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.counter = 0\n        \n    def forward(self, x):\n        # Condition function - must return boolean scalar\n        def cond_fn(iter, val):\n            return iter < 3\n            \n        # Body function - must return same structure as carried_inputs\n        def body_fn(iter, val):\n            return iter + 1, val * 2\n            \n        # Initial carried inputs (must be tuple/list)\n        carried_inputs = (torch.tensor(0), x)\n        \n        # Execute while loop\n        final_iter, final_val = torch.ops.higher_order.while_loop(\n            cond_fn, body_fn, carried_inputs\n        )\n        return final_val\n"
}