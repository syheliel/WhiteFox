{
    "summary": "\nThe non_leaf_compile_error_TESTING_ONLY function is a testing-only backend that intentionally raises a TestingOnlyCompileError when non-leaf tensors are provided as inputs. This is used for:\n1. Testing error handling and debugging capabilities\n2. Simulating compilation failures for non-leaf inputs\n3. Validating error propagation in PyTorch's dynamo compiler\n4. Ensuring proper handling of tensor leaf/non-leaf states during compilation\n```\n\n```python\nimport torch\n\ndef test_function(x):\n    return torch.relu(x)\n\n# Create a non-leaf tensor (requires_grad=True makes it non-leaf)\nx = torch.randn(3, requires_grad=True)\n\n# Compile with the testing backend\ncompiled_fn = torch.compile(test_function, backend='non_leaf_compile_error_TESTING_ONLY')\n\n# This will trigger the TestingOnlyCompileError\nresult = compiled_fn(x)\n```\n\n```yaml\n- torch.compile\n- torch.relu\n- torch.randn\n",
    "python_code": "\nimport torch\n\ndef test_function(x):\n    return torch.relu(x)\n\n# Create a non-leaf tensor (requires_grad=True makes it non-leaf)\nx = torch.randn(3, requires_grad=True)\n\n# Compile with the testing backend\ncompiled_fn = torch.compile(test_function, backend='non_leaf_compile_error_TESTING_ONLY')\n\n# This will trigger the TestingOnlyCompileError\nresult = compiled_fn(x)\n```\n\n```yaml\n- torch.compile\n- torch.relu\n- torch.randn\n",
    "api": [
        "torch.compile",
        "torch.relu",
        "torch.randn"
    ]
}