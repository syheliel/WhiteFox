{
    "summary": "\nThe EQUALS_MATCH function handles equality comparison guards in PyTorch's dynamo system. Key aspects:\n1. Special cases for NaN comparison (both float and complex)\n2. Type validation for common constant types\n3. Dispatch key handling for tensor matching\n4. Weak reference management\n5. Memory safety considerations\n",
    "python_code": "\nimport torch\nimport math\nimport numpy as np\n\nclass TestModule(torch.nn.Module):\n    def forward(self, x):\n        # This will trigger EQUALS_MATCH guard for NaN comparison\n        if math.isnan(x[0]):\n            return x * 2\n        # This will trigger EQUALS_MATCH guard for complex NaN\n        if np.isnan(complex(x[0], x[1])):\n            return x * 3\n        return x\n\nmodel = TestModule()\nopt_model = torch.compile(model)\nx = torch.tensor([float('nan'), 1.0])\nopt_model(x)\n",
    "api": [
        "torch.isnan",
        "torch.is_complex",
        "torch._C._dispatch_keys",
        "torch._C._dispatch_tls_local_include_set",
        "torch._C._dispatch_tls_local_exclude_set",
        "torch.nn.Module"
    ]
}