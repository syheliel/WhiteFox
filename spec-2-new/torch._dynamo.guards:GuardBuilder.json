{
    "summary": "\nThe EQUALS_MATCH function handles equality comparisons for various Python types in PyTorch's guard system. Key aspects:\n1. Special cases for NaN comparisons (float and complex) using math.isnan/np.isnan\n2. Type validation for common constant types and mutable containers\n3. Deep copy handling for mutable types to ensure pointer equality checks work correctly\n4. Custom equality logic for distributed tensor types (Shard, Replicate, Partial)\n5. Special handling for nan values that don't compare equal to themselves\n```\n\n```python\nimport torch\nimport math\nimport numpy as np\n\nclass Model(torch.nn.Module):\n    def forward(self, x):\n        # This will trigger EQUALS_MATCH guard for nan comparison\n        if math.isnan(x):\n            return torch.zeros(1)\n        return torch.ones(1)\n\nmodel = Model()\ncompiled = torch.compile(model)\nx = torch.tensor([float('nan')])\ncompiled(x)  # Will create EQUALS_MATCH guard for nan\n```\n\n```yaml\n- torch.nn.Module\n- torch.tensor\n- torch.zeros\n- torch.ones\n- math.isnan\n- numpy.isnan\n- torch._C._dispatch_keys\n- torch._C._dispatch_tls_local_include_set\n- torch._C._dispatch_tls_local_exclude_set\n",
    "python_code": "\nimport torch\nimport math\nimport numpy as np\n\nclass Model(torch.nn.Module):\n    def forward(self, x):\n        # This will trigger EQUALS_MATCH guard for nan comparison\n        if math.isnan(x):\n            return torch.zeros(1)\n        return torch.ones(1)\n\nmodel = Model()\ncompiled = torch.compile(model)\nx = torch.tensor([float('nan')])\ncompiled(x)  # Will create EQUALS_MATCH guard for nan\n```\n\n```yaml\n- torch.nn.Module\n- torch.tensor\n- torch.zeros\n- torch.ones\n- math.isnan\n- numpy.isnan\n- torch._C._dispatch_keys\n- torch._C._dispatch_tls_local_include_set\n- torch._C._dispatch_tls_local_exclude_set\n",
    "api": [
        "torch.nn.Module",
        "torch.tensor",
        "torch.zeros",
        "torch.ones",
        "math.isnan",
        "numpy.isnan",
        "torch._C._dispatch_keys",
        "torch._C._dispatch_tls_local_include_set",
        "torch._C._dispatch_tls_local_exclude_set"
    ]
}