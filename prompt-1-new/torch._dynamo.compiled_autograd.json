
{
    "NaNChecker": {
        "hints": [
            {
                "type": "precision",
                "target_line": "if torch.isnan(grad).any()",
                "func": "NaNChecker.check"
            },
            {
                "type": "argument_check",
                "target_line": "assert self.accumulate_grad == bool(acc_grad_nodes) and self.accumulate_grad == (not output_nodes)",
                "func": "NaNChecker.prep_with_graph"
            }
        ]
    },
    "AutogradCompilerInstance": {
        "hints": [
            {
                "type": "quantization",
                "target_line": "inputs = [self.wrap_fake(x, self.source(\"inputs\", idx)) for idx, x in enumerate(inputs)]",
                "func": "AutogradCompilerInstance.begin_capture"
            },
            {
                "type": "precision",
                "target_line": "grad_ins.append(torch.empty(size=size, dtype=dtype, layout=layout, device=device))",
                "func": "AutogradCompilerInstance.proxy_call_backward"
            },
            {
                "type": "argument_check",
                "target_line": "assert not hasattr(self, name)",
                "func": "AutogradCompilerInstance.bind_function"
            },
            {
                "type": "trigger",
                "target_line": "self.fx_tracer.graph.eliminate_dead_code(is_impure)",
                "func": "AutogradCompilerInstance.dce"
            }
        ]
    },
    "OpNamespace": {
        "hints": [
            {
                "type": "argument_check",
                "target_line": "assert not hasattr(self, name)",
                "func": "OpNamespace.add"
            }
        ]
    },
    "copy_slices_prologue": {
        "hints": [
            {
                "type": "precision",
                "target_line": "result.copy_(grad)",
                "func": "copy_slices_prologue"
            }
        ]
    },
    "copy_slices_epilogue": {
        "hints": [
            {
                "type": "precision",
                "target_line": "grad_slice.copy_(res[i])",
                "func": "copy_slices_epilogue"
            }
        ]
    }
}
